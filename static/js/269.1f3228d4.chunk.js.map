{"version":3,"file":"static/js/269.1f3228d4.chunk.js","mappings":"uPAEaA,EAAcC,EAAAA,GAAAA,GAAH,uGAQXC,EAASD,EAAAA,GAAAA,EAAH,gF,SC2BnB,EAhCgB,WACd,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KAYA,OAVAC,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBN,GACbO,MAAK,YAAkB,IAAfC,EAAc,EAAdA,QACPJ,EAAgBI,EACjB,IACAC,OAAM,SAAAC,GACLC,QAAQC,IAAI,gBAAiBF,EAAMG,QACpC,GACJ,GAAE,CAACb,KAGF,8BAC2B,IAAxBG,EAAaW,QACZ,SAACjB,EAAD,UACGM,EAAaY,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAChB,2BACE,qCAAaD,EAAb,QACA,SAAClB,EAAD,UAASmB,MAFFF,EADO,OAQpB,uEAIP,C,2NCjCYG,EAAe,kCACtBC,EAAW,+BACXC,EAAU,mCAEVC,EAAQ,SAKVC,EAAU,CACZC,OAAQ,CACNC,QAASJ,IAIAK,EAAiB,mCAAG,6GAENC,EAAAA,EAAAA,IAAUP,EAdpB,sBAcyCG,GAFzB,cAEvBK,EAFuB,yBAItBA,EAASC,MAJa,gCAM7BlB,QAAQC,IAAI,iBAAkB,KAAMC,SANP,yDAAH,qDAUjBiB,EAAY,mCAAG,WAAMd,GAAN,iGAEDW,EAAAA,EAAAA,GAAM,GAAD,OAAIP,GAAJ,OAAeE,EAAf,YAAwBN,GAAMO,GAFlC,cAElBK,EAFkB,yBAIjBA,EAASC,MAJQ,gCAMxBlB,QAAQC,IAAI,iBAAkB,KAAMC,SANZ,yDAAH,sDAUZkB,EAAe,mCAAG,WAAMf,GAAN,iGAEJW,EAAAA,EAAAA,GAAM,GAAD,OACvBP,GADuB,OACZE,EADY,YACHN,GADG,OAhChB,YAkCVO,GAJyB,cAErBK,EAFqB,yBAOpBA,EAASC,MAPW,gCAS3BlB,QAAQC,IAAI,iBAAkB,KAAMC,SATT,yDAAH,sDAafP,EAAe,mCAAG,WAAMU,GAAN,iGAEJW,EAAAA,EAAAA,GAAM,GAAD,OACvBP,GADuB,OACZE,EADY,YACHN,GADG,OA5ChB,YA8CVO,GAJyB,cAErBK,EAFqB,yBAOpBA,EAASC,MAPW,gCAS3BlB,QAAQC,IAAI,iBAAkB,KAAMC,SATT,yDAAH,sDAafmB,EAAe,mCAAG,WAAMC,GAAN,gFACzBV,EAAU,CACZC,OAAQ,CACNC,QAASJ,EACTY,MAAOA,IAJkB,mBASJN,EAAAA,EAAAA,GAAM,GAAD,OAAIP,GAAJ,OA/DjB,iBA+D0CG,GAT1B,cASrBK,EATqB,yBAWpBA,EAASC,MAXW,gCAa3BlB,QAAQC,IAAI,iBAAkB,KAAMC,SAbT,yDAAH,qD","sources":["components/Reviews/Reviews.styled.js","components/Reviews/Reviews.js","services/api.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewsList = styled.ul`\n  display: flex;\n  flex-direction: column;\n  gap: 14px;\n\n  padding: 14px;\n`;\n\nexport const Review = styled.p`\n  margin-top: 8px;\n  font-size: 14px;\n  color: grey;\n`;\n","import { getMovieReviews } from 'services/api';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Review, ReviewsList } from './Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState([]);\n\n  useEffect(() => {\n    getMovieReviews(movieId)\n      .then(({ results }) => {\n        setMovieReviews(results);\n      })\n      .catch(error => {\n        console.log('error.message', error.message);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      {movieReviews.length !== 0 ? (\n        <ReviewsList>\n          {movieReviews.map(({ id, author, content }) => (\n            <li key={id}>\n              <h5>Author: {author}.</h5>\n              <Review>{content}</Review>\n            </li>\n          ))}\n        </ReviewsList>\n      ) : (\n        <p>'We dont have any reviews for this movie' </p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e90e5cc72f12501ca886fe4fb737b4cc';\nconst TRENDING = '/trending/movie/day';\nconst MOVIE = '/movie';\nconst CREDITS = '/credits';\nconst REVIEWS = '/reviews';\nconst SEARCH = '/search/movie';\n\nlet options = {\n  params: {\n    api_key: API_KEY,\n  },\n};\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(BASE_URL + TRENDING, options);\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieById = async id => {\n  try {\n    const response = await axios(`${BASE_URL}${MOVIE}/${id}`, options);\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieCredits = async id => {\n  try {\n    const response = await axios(\n      `${BASE_URL}${MOVIE}/${id}${CREDITS}`,\n      options\n    );\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieReviews = async id => {\n  try {\n    const response = await axios(\n      `${BASE_URL}${MOVIE}/${id}${REVIEWS}`,\n      options\n    );\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  let options = {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  };\n\n  try {\n    const response = await axios(`${BASE_URL}${SEARCH}`, options);\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n"],"names":["ReviewsList","styled","Review","movieId","useParams","useState","movieReviews","setMovieReviews","useEffect","getMovieReviews","then","results","catch","error","console","log","message","length","map","id","author","content","BASE_IMG_URL","BASE_URL","API_KEY","MOVIE","options","params","api_key","getTrendingMovies","axios","response","data","getMovieById","getMovieCredits","getMovieByQuery","query"],"sourceRoot":""}