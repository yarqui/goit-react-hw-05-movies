{"version":3,"file":"static/js/310.6c0bfb94.chunk.js","mappings":"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","sources":["components/MovieItems/MovieItems.styled.js","components/MovieItems/MovieItems.js","pages/Movies/Movies.js","services/api.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const ItemLink = styled(Link)`\n  text-decoration: none;\n  color: inherit;\n  transition: 200ms ease-in-out;\n  &:hover {\n    color: #ffffff;\n  }\n`;\n","// import PAGE_NAMES from 'router/paths';\nimport { BASE_IMG_URL } from 'services/api';\nimport { ItemLink } from './MovieItems.styled';\nimport defaultPoster from '../../images/default-poster.webp';\nimport { useLocation } from 'react-router-dom';\n\nconst MovieItems = ({ movies }) => {\n  const location = useLocation();\n\n  return movies.map(({ id, title, poster_path, release_date }) => {\n    return (\n      <li key={id}>\n        <ItemLink to={`/movies/${id}`} state={{ from: location }}>\n          <img\n            src={poster_path ? `${BASE_IMG_URL}${poster_path}` : defaultPoster}\n            alt={title}\n            width=\"100px\"\n          ></img>\n\n          <p>{title ? title : 'No title'}</p>\n\n          <p>{release_date ? release_date.slice(0, 4) : ''}</p>\n        </ItemLink>\n      </li>\n    );\n  });\n};\n\nexport default MovieItems;\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovieByQuery } from 'services/api';\nimport MovieItems from 'components/MovieItems';\nimport { toast } from 'react-toastify';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') {\n      return;\n    }\n\n    getMovieByQuery(query)\n      .then(({ results }) => {\n        if (results.length === 0) {\n          toast.info(`Sorry, there are no movies with the search ${query}`);\n          return;\n        }\n\n        setMovies(results);\n      })\n      .catch(error => {\n        console.log('error.message', error.message);\n      });\n  }, [query]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    const form = e.currentTarget;\n    const normalizedQuery = form.elements.search.value.trim().toLowerCase();\n\n    setSearchParams(normalizedQuery !== '' ? { query: normalizedQuery } : {});\n\n    form.reset();\n  };\n\n  return (\n    <>\n      <form onSubmit={onSubmit}>\n        <input\n          type=\"text\"\n          name=\"search\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search movies by name\"\n        ></input>\n        <button type=\"submit\">Search</button>\n      </form>\n      <ul>\n        <MovieItems movies={movies} />\n      </ul>\n    </>\n  );\n};\n\nexport default Movies;\n","import axios from 'axios';\n\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e90e5cc72f12501ca886fe4fb737b4cc';\nconst TRENDING = '/trending/movie/day';\nconst MOVIE = '/movie';\nconst CREDITS = '/credits';\nconst REVIEWS = '/reviews';\nconst SEARCH = '/search/movie';\n\nlet options = {\n  params: {\n    api_key: API_KEY,\n  },\n};\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(BASE_URL + TRENDING, options);\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieById = async id => {\n  try {\n    const response = await axios(`${BASE_URL}${MOVIE}/${id}`, options);\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieCredits = async id => {\n  try {\n    const response = await axios(\n      `${BASE_URL}${MOVIE}/${id}${CREDITS}`,\n      options\n    );\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieReviews = async id => {\n  try {\n    const response = await axios(\n      `${BASE_URL}${MOVIE}/${id}${REVIEWS}`,\n      options\n    );\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  let options = {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  };\n\n  try {\n    const response = await axios(`${BASE_URL}${SEARCH}`, options);\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n"],"names":["ItemLink","styled","Link","movies","location","useLocation","map","id","title","poster_path","release_date","to","state","from","src","BASE_IMG_URL","defaultPoster","alt","width","slice","useState","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","getMovieByQuery","then","results","length","toast","catch","error","console","log","message","onSubmit","e","preventDefault","form","currentTarget","normalizedQuery","elements","search","value","trim","toLowerCase","reset","type","name","autoComplete","autoFocus","placeholder","MovieItems","BASE_URL","API_KEY","MOVIE","options","params","api_key","getTrendingMovies","axios","response","data","getMovieById","getMovieCredits","getMovieReviews"],"sourceRoot":""}