{"version":3,"file":"static/js/100.3c0d8e89.chunk.js","mappings":"mPAsCA,EAjCa,WACX,OAAwBA,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QAUR,OARAE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAgBH,GACbI,MAAK,SAAAC,GAAI,OAAIN,EAAQM,EAAKP,KAAjB,IACTQ,OAAM,SAAAC,GACLC,QAAQC,IAAI,gBAAiBF,EAAMG,QACpC,GACJ,GAAE,CAACV,KAGF,+BACE,wBACGF,EAAKa,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAChC,OACE,2BACE,gBACEC,IAAKD,EAAY,UAAME,EAAAA,IAAN,OAAqBF,GAAiBG,EACvDC,IAAYL,EACZM,MAAM,SAER,uBAAIP,KACJ,uBAAIC,MAPGF,EAUZ,OAIR,C,2NClCYK,EAAe,kCACtBI,EAAW,+BACXC,EAAU,mCAEVC,EAAQ,SAKVC,EAAU,CACZC,OAAQ,CACNC,QAASJ,IAIAK,EAAiB,mCAAG,6GAENC,EAAAA,EAAAA,IAAUP,EAdpB,sBAcyCG,GAFzB,cAEvBK,EAFuB,yBAItBA,EAASxB,MAJa,gCAM7BG,QAAQC,IAAI,iBAAkB,KAAMC,SANP,yDAAH,qDAUjBoB,EAAY,mCAAG,WAAMlB,GAAN,iGAEDgB,EAAAA,EAAAA,GAAM,GAAD,OAAIP,GAAJ,OAAeE,EAAf,YAAwBX,GAAMY,GAFlC,cAElBK,EAFkB,yBAIjBA,EAASxB,MAJQ,gCAMxBG,QAAQC,IAAI,iBAAkB,KAAMC,SANZ,yDAAH,sDAUZP,EAAe,mCAAG,WAAMS,GAAN,iGAEJgB,EAAAA,EAAAA,GAAM,GAAD,OACvBP,GADuB,OACZE,EADY,YACHX,GADG,OAhChB,YAkCVY,GAJyB,cAErBK,EAFqB,yBAOpBA,EAASxB,MAPW,gCAS3BG,QAAQC,IAAI,iBAAkB,KAAMC,SATT,yDAAH,sDAafqB,EAAe,mCAAG,WAAMnB,GAAN,iGAEJgB,EAAAA,EAAAA,GAAM,GAAD,OACvBP,GADuB,OACZE,EADY,YACHX,GADG,OA5ChB,YA8CVY,GAJyB,cAErBK,EAFqB,yBAOpBA,EAASxB,MAPW,gCAS3BG,QAAQC,IAAI,iBAAkB,KAAMC,SATT,yDAAH,sDAafsB,EAAe,mCAAG,WAAMC,GAAN,gFACzBT,EAAU,CACZC,OAAQ,CACNC,QAASJ,EACTW,MAAOA,IAJkB,mBASJL,EAAAA,EAAAA,GAAM,GAAD,OAAIP,GAAJ,OA/DjB,iBA+D0CG,GAT1B,cASrBK,EATqB,yBAWpBA,EAASxB,MAXW,gCAa3BG,QAAQC,IAAI,iBAAkB,KAAMC,SAbT,yDAAH,qD","sources":["components/Cast/Cast.js","services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { BASE_IMG_URL, getMovieCredits } from 'services/api';\nimport noImage from '../../images/no-image.webp';\n\nconst Cast = () => {\n  const [cast, setCast] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieCredits(movieId)\n      .then(data => setCast(data.cast))\n      .catch(error => {\n        console.log('error.message', error.message);\n      });\n  }, [movieId]);\n\n  return (\n    <>\n      <ul>\n        {cast.map(({ id, name, character, profile_path }) => {\n          return (\n            <li key={id}>\n              <img\n                src={profile_path ? `${BASE_IMG_URL}${profile_path}` : noImage}\n                alt={(name, character)}\n                width=\"100\"\n              ></img>\n              <p>{name}</p>\n              <p>{character}</p>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = 'e90e5cc72f12501ca886fe4fb737b4cc';\nconst TRENDING = '/trending/movie/day';\nconst MOVIE = '/movie';\nconst CREDITS = '/credits';\nconst REVIEWS = '/reviews';\nconst SEARCH = '/search/movie';\n\nlet options = {\n  params: {\n    api_key: API_KEY,\n  },\n};\n\nexport const getTrendingMovies = async () => {\n  try {\n    const response = await axios.get(BASE_URL + TRENDING, options);\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieById = async id => {\n  try {\n    const response = await axios(`${BASE_URL}${MOVIE}/${id}`, options);\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieCredits = async id => {\n  try {\n    const response = await axios(\n      `${BASE_URL}${MOVIE}/${id}${CREDITS}`,\n      options\n    );\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieReviews = async id => {\n  try {\n    const response = await axios(\n      `${BASE_URL}${MOVIE}/${id}${REVIEWS}`,\n      options\n    );\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n\nexport const getMovieByQuery = async query => {\n  let options = {\n    params: {\n      api_key: API_KEY,\n      query: query,\n    },\n  };\n\n  try {\n    const response = await axios(`${BASE_URL}${SEARCH}`, options);\n\n    return response.data;\n  } catch (error) {\n    console.log('error.message:', error.message);\n  }\n};\n"],"names":["useState","cast","setCast","movieId","useParams","useEffect","getMovieCredits","then","data","catch","error","console","log","message","map","id","name","character","profile_path","src","BASE_IMG_URL","noImage","alt","width","BASE_URL","API_KEY","MOVIE","options","params","api_key","getTrendingMovies","axios","response","getMovieById","getMovieReviews","getMovieByQuery","query"],"sourceRoot":""}